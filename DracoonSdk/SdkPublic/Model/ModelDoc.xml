<docs>

  <members name="algorithmState">

    <AlgorithmState>
      <summary>
        Enumeration of algorithm states.
      </summary>
    </AlgorithmState>

    <Required>
      <summary>
        The prefered algorithms.
      </summary>
    </Required>

    <Discouraged>
      <summary>
        Algorithms flagged with this state shouldn't be used anymore.
      </summary>
    </Discouraged>

  </members>

  <members name="classification">

    <Classification>
      <summary>
        Enumeration of file classification types.
      </summary>
    </Classification>

    <Public>
      <summary>
        The public classification.
      </summary>
    </Public>

    <Internal>
      <summary>
        The internal classification.
      </summary>
    </Internal>

    <Confidential>
      <summary>
        The confidential classification.
      </summary>
    </Confidential>

    <StrictlyConfidential>
      <summary>
        The strictly confidential classification.
      </summary>
    </StrictlyConfidential>

  </members>

  <members name="avatarInfo">

    <AvatarInfo>
      <summary>
        Informations about the current set avatar.
      </summary>
    </AvatarInfo>

    <AvatarUUID>
      <summary>
        The unique id of the current set avatar image.
      </summary>
    </AvatarUUID>

    <IsCustomAvatar>
      <summary>
        Indicates if the current set avatar is a custom set image or the default server generated image.
      </summary>
    </IsCustomAvatar>

  </members>

  <member name="attributeList">

    <AttributeList>
      <summary>
        This model stores custom defined attributes. The list may be a paginated response.
        <para>
          <see cref="Dracoon.Sdk.Model.AttributeList.Offset"/> and <see cref="Dracoon.Sdk.Model.AttributeList.Limit"/> can be used to get the start and length of the page.
        </para>
      </summary>
    </AttributeList>

    <Offset>
      <summary>
        The index of the first returned item of the possible total list.
      </summary>
    </Offset>

    <Limit>
      <summary>
        The number of returned items.
      </summary>
    </Limit>

    <Total>
      <summary>
        The total number of items which can be requested.
      </summary>
    </Total>

    <Items>
      <summary>
        The returned upload share items. See also <seealso cref="Dracoon.Sdk.Model.UploadShare"/>
      </summary>
    </Items>

  </member>

  <member name="attribute">

    <AttributeList>
      <summary>
        This model stores a single custom defined attribute.
      </summary>
    </AttributeList>

    <Key>
      <summary>
        The attribute key name.
      </summary>
    </Key>

    <Value>
      <summary>
        The attribute value.
      </summary>
    </Value>

  </member>

  <members name="customerAccount">

    <CustomerAccount>
      <summary>
        This model stores information about the customer account.
      </summary>
    </CustomerAccount>

    <Id>
      <summary>
        The ID of the customer.
      </summary>
    </Id>

    <Name>
      <summary>
        The name of the customer.
      </summary>
    </Name>

    <AccountsUsed>
      <summary>
        The number of user accounts used by the customer.
      </summary>
    </AccountsUsed>

    <AccountsLimit>
      <summary>
        The number of user accounts available to the customer.
      </summary>
    </AccountsLimit>

    <SpaceUsed>
      <summary>
        The space used by the customer.
      </summary>
    </SpaceUsed>

    <SpaceLimit>
      <summary>
        The space available to the customer.
      </summary>
    </SpaceLimit>

    <HasEncryptionEnabled>
      <summary>
        If <c>true</c> the customer has encryption enabled, otherwise <c>false</c>.
      </summary>
    </HasEncryptionEnabled>

  </members>

  <members name="recycleBinItem">

    <RecycleBinItem>
      <summary>
        This model stores informations about the versions of a node.
      </summary>
    </RecycleBinItem>

    <ParentId>
      <summary>
        The id of the parent node.
      </summary>
    </ParentId>

    <ParentPath>
      <summary>
        The path of the parent node.
      </summary>
    </ParentPath>

    <Name>
      <summary>
        The name of the versioned node.
      </summary>
    </Name>

    <Type>
      <summary>
        The type of the versioned node. See also <seealso cref="Dracoon.Sdk.Model.NodeType"/>
      </summary>
    </Type>

    <VersionsCount>
      <summary>
        The number of versions which exists for the node.
      </summary>
    </VersionsCount>

    <FirstDeletedAt>
      <summary>
        The date on which the node was first versioned.
      </summary>
    </FirstDeletedAt>

    <LastDeletedAt>
      <summary>
        The date on which the node was last versioned.
      </summary>
    </LastDeletedAt>

    <LastDeletedNodeId>
      <summary>
        The node id of the last versioned node instance.
      </summary>
    </LastDeletedNodeId>

  </members>"

  <members name="recycleBinItemList">

    <RecycleBinItemList>
      <summary>
        This model stores a list of all nodes in the recycle bin of a room. The list may be a paginated response.
        <para>
          <see cref="Dracoon.Sdk.Model.RecycleBinItemList.Offset"/> and <see cref="Dracoon.Sdk.Model.RecycleBinItemList.Limit"/> can be used to get the start and length of the page.
        </para>
      </summary>
    </RecycleBinItemList>

    <Offset>
      <summary>
        The index of the first returned item of the possible total list.
      </summary>
    </Offset>

    <Limit>
      <summary>
        The number of returned items.
      </summary>
    </Limit>

    <Total>
      <summary>
        The total number of items which can be requested.
      </summary>
    </Total>

    <Items>
      <summary>
        The returned recycle bin items of a room. See also <seealso cref="Dracoon.Sdk.Model.RecycleBinItem"/>
      </summary>
    </Items>

  </members>

  <members name="downloadShare">

    <DownloadShare>
      <summary>
        This model stores informations about a download share.
      </summary>
    </DownloadShare>

    <ShareId>
      <summary>
        The ID of this download share.
      </summary>
    </ShareId>

    <NodeId>
      <summary>
        The ID of the referenced node.
      </summary>
    </NodeId>

    <AccessKey>
      <summary>
        The key is used to build the download share uri.
      </summary>
    </AccessKey>

    <NotifyCreator>
      <summary>
        Indicates if the creator of this share gets a notification for every usage of this download share.
      </summary>
    </NotifyCreator>

    <CurrentDownloadsCount>
      <summary>
        The current number of using this download share.
      </summary>
    </CurrentDownloadsCount>

    <CreatedAt>
      <summary>
        The creation date of this download share.
      </summary>
    </CreatedAt>

    <CreatedBy>
      <summary>
        The user which created this download share. See also <seealso cref="Dracoon.Sdk.Model.UserInfo"/>
      </summary>
    </CreatedBy>

    <Name>
      <summary>
        The name of this download share.
      </summary>
    </Name>

    <Notes>
      <summary>
        The notes for this download share.
      </summary>
    </Notes>

    <ShowCreatorName>
      <summary>
        Indicates if the name of the creator is shown by using this download share.
      </summary>
    </ShowCreatorName>

    <ShowCreatorUserName>
      <summary>
        Indicates if the user name of the creator is shown by using this download share.
      </summary>
    </ShowCreatorUserName>

    <IsProtected>
      <summary>
        Indicates if this download share is protected by a password.
      </summary>
    </IsProtected>

    <ExpireAt>
      <summary>
        The expiration date of this download share.
      </summary>
    </ExpireAt>

    <MaxAllowedDownloads>
      <summary>
        The maximum usage number for this download share.
      </summary>
    </MaxAllowedDownloads>

    <IsEncrypted>
      <summary>
        Indicates if the referenced node is encrypted.
      </summary>
    </IsEncrypted>

    <Type>
      <summary>
        Indicates type of the shared node.
      </summary>
    </Type>

  </members>

  <members name="downloadShareList">

    <DownloadShareList>
      <summary>
        This model stores a list of download shares. The list may be a paginated response.
        <para>
          <see cref="Dracoon.Sdk.Model.DownloadShareList.Offset"/> and <see cref="Dracoon.Sdk.Model.DownloadShareList.Limit"/> can be used to get the start and length of the page.
        </para>
      </summary>
    </DownloadShareList>

    <Offset>
      <summary>
        The index of the first returned item of the possible total list.
      </summary>
    </Offset>

    <Limit>
      <summary>
        The number of returned items.
      </summary>
    </Limit>

    <Total>
      <summary>
        The total number of items which can be requested.
      </summary>
    </Total>

    <Items>
      <summary>
        The returned download share items. See also <seealso cref="Dracoon.Sdk.Model.DownloadShare"/>
      </summary>
    </Items>

  </members>

  <members name="fileKeyAlgorithmData">

    <FileKeyAlgorithmData>
      <summary>
        This model stores informations about a algorithm for the file keys.
      </summary>
    </FileKeyAlgorithmData>

    <Algorithm>
      <summary>
        The file key algorithm.
      </summary>
    </Algorithm>

    <State>
      <summary>
        The state of the file key algorithm.
      </summary>
    </State>

  </members>

  <members name="groupMemberAcceptance">

    <GroupMemberAcceptance>
      <summary>
        Enumeration of group member acceptance types.
      </summary>
    </GroupMemberAcceptance>

    <AutoAllow>
      <summary>
        Indicates that new members automatically will be accepted on there group join.
      </summary>
    </AutoAllow>

    <Pending>
      <summary>
        Indicates that new members must wait for approval on there group join.
      </summary>
    </Pending>

  </members>

  <members name="iFileDownloadCallback">

    <IFileDownloadCallback>
      <summary>
        A listener for receiving file download progress events.
      </summary>
    </IFileDownloadCallback>

    <OnStarted>
      <summary>
        This methods gets called when a download was started.
      </summary>
      <param name="actionId">
        The id of the download. See also <seealso cref="Dracoon.Sdk.INodes.DownloadFile(string, long, System.IO.Stream, IFileDownloadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartDownloadFileAsync(string, long, System.IO.Stream, IFileDownloadCallback)"/>
      </param>
    </OnStarted>

    <OnRunning>
      <summary>
        This methods gets called at every progress update (every 250ms).
      </summary>
      <param name="actionId">
        The id of the download. See also <seealso cref="Dracoon.Sdk.INodes.DownloadFile(string, long, System.IO.Stream, IFileDownloadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartDownloadFileAsync(string, long, System.IO.Stream, IFileDownloadCallback)"/>
      </param>
      <param name="bytesDownloaded">The number of bytes which have been read.</param>
      <param name="bytesTotal">The total number of bytes.</param>
    </OnRunning>

    <OnFinished>
      <summary>
        This method gets called when a download was finished.
      </summary>
      <param name="actionId">
        The id of the download. See also <seealso cref="Dracoon.Sdk.INodes.DownloadFile(string, long, System.IO.Stream, IFileDownloadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartDownloadFileAsync(string, long, System.IO.Stream, IFileDownloadCallback)"/>
      </param>
    </OnFinished>

    <OnCanceled>
      <summary>
        This method gets called when a download was canceled.
      </summary>
      <param name="actionId">
        The id of the download. See also <seealso cref="Dracoon.Sdk.INodes.DownloadFile(string, long, System.IO.Stream, IFileDownloadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartDownloadFileAsync(string, long, System.IO.Stream, IFileDownloadCallback)"/>
      </param>
    </OnCanceled>

    <OnFailed>
      <summary>
        This method gets called when a download failed.
      </summary>
      <param name="actionId">
        The id of the download. See also <seealso cref="Dracoon.Sdk.INodes.DownloadFile(string, long, System.IO.Stream, IFileDownloadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartDownloadFileAsync(string, long, System.IO.Stream, IFileDownloadCallback)"/>
      </param>
      <param name="occuredError">
        The cause for the error.
      </param>
    </OnFailed>

  </members>

  <members name="iFileUploadCallback">

    <IFileUploadCallback>
      <summary>
        A listener for receiving file upload progress events.
      </summary>
    </IFileUploadCallback>

    <OnStarted>
      <summary>
        This methods gets called when a upload was started.
      </summary>
      <param name="actionId">
        The id of the upload. See also <seealso cref="Dracoon.Sdk.INodes.UploadFile(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartUploadFileAsync(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/>
      </param>
    </OnStarted>

    <OnRunning>
      <summary>
        This methods gets called at every progress update (every 250ms).
      </summary>
      <param name="actionId">
        The id of the upload. See also <seealso cref="Dracoon.Sdk.INodes.UploadFile(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartUploadFileAsync(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/>
      </param>
      <param name="bytesUploaded">The number of bytes which have been written.</param>
      <param name="bytesTotal">The total number of bytes.</param>
    </OnRunning>

    <OnFinished>
      <summary>
        This method gets called when a upload was finished.
      </summary>
      <param name="actionId">
        The id of the upload. See also <seealso cref="Dracoon.Sdk.INodes.UploadFile(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartUploadFileAsync(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/>
      </param>
      <param name="resultNode">
        The result node.
      </param>
    </OnFinished>

    <OnCanceled>
      <summary>
        This method gets called when a upload was canceled.
      </summary>
      <param name="actionId">
        The id of the upload. See also <seealso cref="Dracoon.Sdk.INodes.UploadFile(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartUploadFileAsync(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/>
      </param>
    </OnCanceled>

    <OnFailed>
      <summary>
        This method gets called when a upload failed.
      </summary>
      <param name="actionId">
        The id of the upload. See also <seealso cref="Dracoon.Sdk.INodes.UploadFile(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/> or <seealso cref="Dracoon.Sdk.INodes.StartUploadFileAsync(string, FileUploadRequest, System.IO.Stream, long, IFileUploadCallback)"/>
      </param>
      <param name="occuredError">
        The cause for the error.
      </param>
    </OnFailed>

  </members>

  <members name="node">

    <Node>
      <summary>
        This model stores information about a node.
        <para>
          Node is generic term for all file system objects in DRACOON. Rooms, folders and files are nodes.
        </para>
      </summary>
    </Node>

    <Id>
      <summary>
        The id of the node.
      </summary>
    </Id>

    <Type>
      <summary>
        The type of the node. See also <seealso cref="Dracoon.Sdk.Model.NodeType"/>
      </summary>
    </Type>

    <ParentId>
      <summary>
        The parent id of the node.
      </summary>
    </ParentId>

    <ParentPath>
      <summary>
        The path of the parent node.
      </summary>
    </ParentPath>

    <Name>
      <summary>
        The name of the node.
      </summary>
    </Name>

    <Extension>
      <summary>
        The file extension of the node. (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.File"/>).
      </summary>
    </Extension>

    <MediaType>
      <summary>
        The file media type like "image/jpeg", "application/pdf", ... (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.File"/>).
      </summary>
    </MediaType>

    <MediaToken>
      <summary>
        The media token to request a thumbnail from the media server. (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.File"/>).
      </summary>
    </MediaToken>

    <Size>
      <summary>
        The byte size of the node. If the node is a <see cref="Dracoon.Sdk.Model.NodeType.Room"/> or <see cref="Dracoon.Sdk.Model.NodeType.Folder"/> the total byte size of the underlying files.
      </summary>
    </Size>

    <Quota>
      <summary>
        The quota in bytes. (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.Room"/>).
      </summary>
    </Quota>

    <Classification>
      <summary>
        The classification of the node. See also <seealso cref="Dracoon.Sdk.Model.Classification"/>
      </summary>
    </Classification>

    <Notes>
      <summary>
        The notes for the node.
      </summary>
    </Notes>

    <Hash>
      <summary>
        The hash value of the node. (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.File"/>).
      </summary>
    </Hash>

    <ExpireAt>
      <summary>
        The expiration date of the node. (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.File"/>).
      </summary>
    </ExpireAt>

    <CreatedAt>
      <summary>
        The creation date of the node.
      </summary>
    </CreatedAt>

    <CreatedBy>
      <summary>
        The user which created the node. See also <seealso cref="Dracoon.Sdk.Model.UserInfo"/>
      </summary>
    </CreatedBy>

    <UpdatedAt>
      <summary>
        The update date of the node. Note: This date is also updated on meta data changes like node name or others.
      </summary>
    </UpdatedAt>

    <UpdatedBy>
      <summary>
        The user which updated the node. See also <seealso cref="Dracoon.Sdk.Model.UserInfo"/>
      </summary>
    </UpdatedBy>

    <CreationTimestamp>
      <summary>
        The creation date of the physical file.
      </summary>
    </CreationTimestamp>

    <ModificationTimestamp>
      <summary>
        The modification date of hte physical file. Note: This date is NOT changed on meta data changes.
      </summary>
    </ModificationTimestamp>

    <HasInheritPermissions>
      <summary>
        Is set to <c>true</c> if the parent permissions are also applied to this node.
      </summary>
    </HasInheritPermissions>

    <Permissions>
      <summary>
        The permissions for the node. See also <seealso cref="Dracoon.Sdk.Model.NodePermissions"/>
      </summary>
    </Permissions>

    <IsFavorite>
      <summary>
        Is set to <c>true</c> if you have ever set this node as favorite.
      </summary>
    </IsFavorite>

    <IsEncrypted>
      <summary>
        Indicates of this node is encrypted.
      </summary>
    </IsEncrypted>

    <CountChildren>
      <summary>
        The number of underlying nodes (no matter what node type they are).
      </summary>
    </CountChildren>

    <CountRooms>
      <summary>
        The number of underlying rooms.
      </summary>
    </CountRooms>

    <CountFolders>
      <summary>
        The number of underlying folders.
      </summary>
    </CountFolders>

    <CountFiles>
      <summary>
        The number of underlying files.
      </summary>
    </CountFiles>

    <CountDeletedVersions>
      <summary>
        The Number of deleted versions.
      </summary>
    </CountDeletedVersions>

    <RecycleBinRetentionPeriod>
      <summary>
        The retention period for deleted nodes.
      </summary>
    </RecycleBinRetentionPeriod>

    <CountDownloadShares>
      <summary>
        The number of download shares which referencing this node.
      </summary>
    </CountDownloadShares>

    <CountUploadShares>
      <summary>
        The number of upload shares which referencing this node.
      </summary>
    </CountUploadShares>

    <BranchVersion>
      <summary>
        The Version of last change in this node or any underlying node.
      </summary>
    </BranchVersion>

  </members>

  <members name="nodeList">

    <NodeList>
      <summary>
        This model stores a list of nodes. The list may be a paginated response.
        <para>
          <see cref="Dracoon.Sdk.Model.NodeList.Offset"/> and <see cref="Dracoon.Sdk.Model.NodeList.Limit"/> can be used to get the start and length of the page.
        </para>
      </summary>
    </NodeList>

    <Offset>
      <summary>
        The index of the first returned item of the possible total list.
      </summary>
    </Offset>

    <Limit>
      <summary>
        The number of returned items.
      </summary>
    </Limit>

    <Total>
      <summary>
        The total number of items which can be requested.
      </summary>
    </Total>

    <Items>
      <summary>
        The returned node items. See also <seealso cref="Dracoon.Sdk.Model.Node"/>
      </summary>
    </Items>

  </members>

  <members name="nodePermissions">

    <NodePermissions>
      <summary>
        This model stores information about the permission a user has on a node.
      </summary>
    </NodePermissions>

    <Manage>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </Manage>

    <Read>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </Read>

    <Create>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </Create>

    <Change>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </Change>

    <Delete>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </Delete>

    <ManageDownloadShare>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </ManageDownloadShare>

    <ManageUploadShare>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </ManageUploadShare>

    <CanReadRecycleBin>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </CanReadRecycleBin>

    <CanRestoreRecycleBin>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </CanRestoreRecycleBin>

    <CanDeleteRecycleBin>
      <summary>
        Is <c>true</c> if the user has the permission on the data room. Otherwise <c>false</c>.
      </summary>
    </CanDeleteRecycleBin>

  </members>

  <members name="nodeType">

    <NodeType>
      <summary>
        Enumeration of node types.
      </summary>
    </NodeType>

    <Room>
      <summary>
        The node is of type room.
      </summary>
    </Room>

    <Folder>
      <summary>
        The node is of type folder.
      </summary>
    </Folder>

    <File>
      <summary>
        The node is of type file.
      </summary>
    </File>

  </members>

  <members name="previousVersion">

    <PreviousVersion>
      <summary>
        This model stores information about a version of a node.
      </summary>
    </PreviousVersion>

    <ParentId>
      <summary>
        The id of the parent node.
      </summary>
    </ParentId>

    <ParentPath>
      <summary>
        The path of the parent node.
      </summary>
    </ParentPath>

    <Type>
      <summary>
        The type of the version node. See also <seealso cref="Dracoon.Sdk.Model.NodeType"/>
      </summary>
    </Type>

    <Name>
      <summary>
        The name of the version node.
      </summary>
    </Name>

    <Id>
      <summary>
        The id of the node.
      </summary>
    </Id>

    <ExpireAt>
      <summary>
        The expiration date of the node. (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.File"/>).
      </summary>
    </ExpireAt>

    <AccessedAt>
      <summary>
        The last access date of the node. (Only if it is a <see cref="Dracoon.Sdk.Model.NodeType.File"/>).
      </summary>
    </AccessedAt>

    <IsEncrypted>
      <summary>
        Indicates of this node is encrypted.
      </summary>
    </IsEncrypted>

    <Notes>
      <summary>
        The notes for the node.
      </summary>
    </Notes>

    <Size>
      <summary>
        The byte size of the node. If the node is a <see cref="Dracoon.Sdk.Model.NodeType.Room"/> or <see cref="Dracoon.Sdk.Model.NodeType.Folder"/> the total byte size of the underlying files.
      </summary>
    </Size>

    <Classification>
      <summary>
        The classification of the node. See also <seealso cref="Dracoon.Sdk.Model.Classification"/>
      </summary>
    </Classification>

    <CreatedAt>
      <summary>
        The creation date of the node.
      </summary>
    </CreatedAt>

    <CreatedBy>
      <summary>
        The user which created the node. See also <seealso cref="Dracoon.Sdk.Model.UserInfo"/>
      </summary>
    </CreatedBy>

    <UpdatedAt>
      <summary>
        The update date of the node.
      </summary>
    </UpdatedAt>

    <UpdatedBy>
      <summary>
        The user which updated the node. See also <seealso cref="Dracoon.Sdk.Model.UserInfo"/>
      </summary>
    </UpdatedBy>

    <DeletedAt>
      <summary>
        The deletion date of the node.
      </summary>
    </DeletedAt>

    <DeletedBy>
      <summary>
        The user which deleted the node. See also <seealso cref="Dracoon.Sdk.Model.UserInfo"/>
      </summary>
    </DeletedBy>

  </members>

  <members name="previousVersionList">

    <PreviousVersionList>
      <summary>
        This model stores a list of versioned nodes. The list may be a paginated response.
        <para>
          <see cref="Dracoon.Sdk.Model.PreviousVersionList.Offset"/> and <see cref="Dracoon.Sdk.Model.PreviousVersionList.Limit"/> can be used to get the start and length of the page.
        </para>
      </summary>
    </PreviousVersionList>

    <Offset>
      <summary>
        The index of the first returned item of the possible total list.
      </summary>
    </Offset>

    <Limit>
      <summary>
        The number of returned items.
      </summary>
    </Limit>

    <Total>
      <summary>
        The total number of items which can be requested.
      </summary>
    </Total>

    <Items>
      <summary>
        The returned versioned node items. See also <seealso cref="Dracoon.Sdk.Model.PreviousVersion"/>
      </summary>
    </Items>

  </members>

  <members name="resolutionStrategy">

    <ResolutionStrategy>
      <summary>
        Enumeration of the resolution strategies.
      </summary>
    </ResolutionStrategy>

    <AutoRename>
      <summary>
        If a conflict exists on e.g. uploading a new file and the file name already exists, the new uploaded file will be automatically renamed.
      </summary>
    </AutoRename>

    <Overwrite>
      <summary>
        If a conflict exists on e.g. uploading a new file and the file name already exists, the old file will be overwritten with the new.
      </summary>
    </Overwrite>

    <Fail>
      <summary>
        If a conflict exists do nothing automatically and a error is thrown.
      </summary>
    </Fail>

  </members>

  <members name="passwordEncryptionPolicies">

    <PasswordEncryptionPolicies>
      <summary>
        This model stores the policies for the encryption password.
      </summary>
    </PasswordEncryptionPolicies>

    <CharacterPolicies>
      <summary>
        The password containment definition.
      </summary>
    </CharacterPolicies>

    <MinimumPasswordLength>
      <summary>
        The minimum password length.
      </summary>
    </MinimumPasswordLength>

    <RejectOwnUserInfo>
      <summary>
        Is <c>true</c> if own user information like "Firstname" or "Lastname" is rejected. Otherwise <c>false</c>.
      </summary>
    </RejectOwnUserInfo>

    <RejectKeyboardPatterns>
      <summary>
        Is <c>true</c> if keyboard patterns like "qwer" or "asdf" are rejected. Otherwise <c>false</c>.
      </summary>
    </RejectKeyboardPatterns>

    <UpdatedAt>
      <summary>
        Defines when the encryption password policies are updated last.
      </summary>
    </UpdatedAt>

    <UpdatedBy>
      <summary>
        Defines who updated the encryption password policies last.
      </summary>
    </UpdatedBy>

  </members>

  <members name="passwordSharePolicies">

    <PasswordSharePolicies>
      <summary>
        This model stores the policies for the share password.
      </summary>
    </PasswordSharePolicies>

    <CharacterPolicies>
      <summary>
        The password containment definition.
      </summary>
    </CharacterPolicies>

    <MinimumPasswordLength>
      <summary>
        The minimum password length.
      </summary>
    </MinimumPasswordLength>

    <RejectDictionaryWords>
      <summary>
        Is <c>true</c> if dictionary words like "Password" are rejected. Otherwise <c>false</c>.
      </summary>
    </RejectDictionaryWords>

    <RejectOwnUserInfo>
      <summary>
        Is <c>true</c> if own user information like "Firstname" or "Lastname" is rejected. Otherwise <c>false</c>.
      </summary>
    </RejectOwnUserInfo>

    <RejectKeyboardPatterns>
      <summary>
        Is <c>true</c> if keyboard patterns like "qwer" or "asdf" are rejected. Otherwise <c>false</c>.
      </summary>
    </RejectKeyboardPatterns>

    <UpdatedAt>
      <summary>
        Defines when the share password policies are updated last.
      </summary>
    </UpdatedAt>

    <UpdatedBy>
      <summary>
        Defines who updated the share password policies last.
      </summary>
    </UpdatedBy>

  </members>

  <members name="passwordCharacterPolicies">

    <PasswordCharacterPolicies>
      <summary>
        This model stores the policy for the character containment.
      </summary>
    </PasswordCharacterPolicies>

    <PredefinedCharacterSets>
      <summary>
        List of character sets which must be contained.
      </summary>
    </PredefinedCharacterSets>

    <NumberOfMustContainCharacteristics>
      <summary>
        Defines how much characteristics must be contained. 
        This means if value is 2 and "PredefinedCharacterSets" hast 3 lists then the password must contain characters of 2 lists of the retrieved 3.
      </summary>
    </NumberOfMustContainCharacteristics>

  </members>

  <members name="passwordCharacterSet">

    <PasswordCharacterSet>
      <summary>
        This model stores the character set definition.
      </summary>
    </PasswordCharacterSet>

    <Set>
      <summary>
        A array of the allowed characters of this set.
      </summary>
    </Set>

    <Type>
      <summary>
        The type of this set.
      </summary>
    </Type>

  </members>

  <members name="PasswordCharacterSetType">

    <PasswordCharacterSetType>
      <summary>
        Defines the type of a character set.
      </summary>
    </PasswordCharacterSetType>

    <None>
      <summary>
        Every character set.
      </summary>
    </None>

    <Uppercase>
      <summary>
        Upper case characters set.
      </summary>
    </Uppercase>

    <Lowercase>
      <summary>
        Lower case characters set.
      </summary>
    </Lowercase>

    <Numeric>
      <summary>
        Numeric characters set.
      </summary>
    </Numeric>

    <Special>
      <summary>
        Special characters set.
      </summary>
    </Special>

  </members>

  <members name="passwordExpiration">

    <PasswordExpiration>
      <summary>
        This model stores the settings for the password expiration.
      </summary>
    </PasswordExpiration>

    <IsEnabled>
      <summary>
        Is <c>true</c> if login password will expire. Otherwise <c>false</c>.
      </summary>
    </IsEnabled>

    <ExpiresAfterDays>
      <summary>
        Defines how old login passwords can be (in Days).
      </summary>
    </ExpiresAfterDays>

  </members>

  <members name="classificationPolicies">

    <ClassificationPolicies>
      <summary>
        This model stores informations about policies for the classifications.
      </summary>
    </ClassificationPolicies>

    <ShareClassificationPolicy>
      <summary>
        The policies for classifications if sharing nodes.
      </summary>
    </ShareClassificationPolicy>
    
  </members>

  <members name="shareClassificationPolicy">

    <ShareClassificationPolicy>
      <summary>
        This model stores informations about policies for the classifications if sharing nodes.
      </summary>
    </ShareClassificationPolicy>

    <ClassificationMinimumForSharePasswort>
      <summary>
        For nodes which have this classification minimum a password is required (and higher classifications).
      </summary>
    </ClassificationMinimumForSharePasswort>

  </members>
  
  <members name="serverDefaultSettings">

    <ServerDefaultSettings>
      <summary>
        This model stores informations about the server defaults.
      </summary>
    </ServerDefaultSettings>

    <LanguageDefault>
      <summary>
        The default language of the server.
      </summary>
    </LanguageDefault>

    <DownloadShareDefaultExpirationPeriodInDays>
      <summary>
        The server side default for the expiration period of a new download share.
      </summary>
    </DownloadShareDefaultExpirationPeriodInDays>

    <UploadShareDefaultExpirationPeriodInDays>
      <summary>
        The server side default for the expiration period of a new upload share.
      </summary>
    </UploadShareDefaultExpirationPeriodInDays>

    <FileUploadDefaultExpirationPeriodInDays>
      <summary>
        The server side default for the expiration of a new uploaded file.
      </summary>
    </FileUploadDefaultExpirationPeriodInDays>

  </members>

  <members name="serverGeneralSettings">

    <ServerGeneralSettings>
      <summary>
        This model stores informations about the general configuration of the server.
      </summary>
    </ServerGeneralSettings>

    <SharePasswordSmsEnabled>
      <summary>
        Is <c>true</c> if share passwords can be send via SMS. Otherwise <c>false</c>.
      </summary>
    </SharePasswordSmsEnabled>

    <CryptoEnabled>
      <summary>
        Is <c>true</c> if cliend-side cryptography is available for rooms. Otherwise <c>false</c>.
      </summary>
    </CryptoEnabled>

    <EmailNotificationButtonEnabled>
      <summary>
        Is <c>true</c> if the email notification button is enabled. Otherwise <c>false</c>.
      </summary>
    </EmailNotificationButtonEnabled>

    <EulaEnabled>
      <summary>
        Is <c>true</c> if each user has to confirm the EULA at first login. Otherwise <c>false</c>.
      </summary>
    </EulaEnabled>

    <MediaServerEnabled>
      <summary>
        Is <c>true</c> if the media server is available. Otherwise <c>false</c>.
      </summary>
    </MediaServerEnabled>

    <UseS3Storage>
      <summary>
        Is <c>true</c> if S3 is used as storage backend. Otherwise <c>false</c>.
      </summary>
    </UseS3Storage>

  </members>

  <members name="serverInfrastructureSettings">

    <ServerInfrastructureSettings>
      <summary>
        This model stores informations about the infrastructure configuration of the server.
      </summary>
    </ServerInfrastructureSettings>

    <SmsConfigEnabled>
      <summary>
        Is <c>true</c> if share passwords can be send via SMS. Otherwise <c>false</c>.
      </summary>
    </SmsConfigEnabled>

    <MediaServerConfigEnabled>
      <summary>
        Is <c>true</c> if the media server is available. Otherwise <c>false</c>.
      </summary>
    </MediaServerConfigEnabled>

    <S3DefaultRegion>
      <summary>
        The suggested S3 region.
      </summary>
    </S3DefaultRegion>

    <S3EnforceDirectUpload>
      <summary>
        Is <c>true</c> if s3 direct upload must be used and a normal proxied upload isn possible. Otherwise <c>false</c>.
      </summary>
    </S3EnforceDirectUpload>

  </members>

  <members name="uploadShare">

    <UploadShare>
      <summary>
        This model stores informations about a upload share.
      </summary>
    </UploadShare>

    <ShareId>
      <summary>
        The ID of this upload share.
      </summary>
    </ShareId>

    <NodeId>
      <summary>
        The ID of the referenced node.
      </summary>
    </NodeId>

    <Name>
      <summary>
        The name of this upload share.
      </summary>
    </Name>

    <IsProtected>
      <summary>
        Indicates if this upload share is protected by a password.
      </summary>
    </IsProtected>

    <AccessKey>
      <summary>
        The key is used to build the upload share uri.
      </summary>
    </AccessKey>

    <NotifyCreator>
      <summary>
        Indicates if the creator of this share gets a notification for every usage of this upload share.
      </summary>
    </NotifyCreator>

    <CreatedAt>
      <summary>
        The creation date of this upload share.
      </summary>
    </CreatedAt>

    <CreatedBy>
      <summary>
        The user which created this upload share. See also <seealso cref="Dracoon.Sdk.Model.UserInfo"/>
      </summary>
    </CreatedBy>

    <ExpireAt>
      <summary>
        The expiration date of this upload share.
      </summary>
    </ExpireAt>

    <NodePath>
      <summary>
        The path of the node which is referenced by the upload share.
      </summary>
    </NodePath>

    <IsEncrypted>
      <summary>
        Indicates if the referenced node is encrypted.
      </summary>
    </IsEncrypted>

    <Notes>
      <summary>
        The notes for this upload share.
      </summary>
    </Notes>

    <UploadedFilesExpirationPeriod>
      <summary>
        The days after which every uploaded file (over this upload share) expires after upload date.
      </summary>
    </UploadedFilesExpirationPeriod>

    <CurrentDoneUploadsCount>
      <summary>
        The number of currently uploaded files over this upload share (which are still uploaded).
      </summary>
    </CurrentDoneUploadsCount>

    <CurrentUploadedFilesCount>
      <summary>
        The total number of uploaded files (included files which were removed later).
      </summary>
    </CurrentUploadedFilesCount>

    <ShowUploadedFiles>
      <summary>
        If <c>true</c> the still uploaded files are publicly visible on upload share page.
      </summary>
    </ShowUploadedFiles>

    <MaxAllowedUploads>
      <summary>
        The maximum number of total uploaded files.
      </summary>
    </MaxAllowedUploads>

    <MaxAllowedTotalSizeOverAllUploadedFiles>
      <summary>
        The maximum size in bytes which can be uploaded over this upload share (over all uploaded files added size).
      </summary>
    </MaxAllowedTotalSizeOverAllUploadedFiles>

    <Type>
      <summary>
        The type of the node which this share references to.
      </summary>
    </Type>

  </members>

  <members name="uploadShareList">

    <UploadShareList>
      <summary>
        This model stores a list of upload shares. The list may be a paginated response.
        <para>
          <see cref="Dracoon.Sdk.Model.UploadShareList.Offset"/> and <see cref="Dracoon.Sdk.Model.UploadShareList.Limit"/> can be used to get the start and length of the page.
        </para>
      </summary>
    </UploadShareList>

    <Offset>
      <summary>
        The index of the first returned item of the possible total list.
      </summary>
    </Offset>

    <Limit>
      <summary>
        The number of returned items.
      </summary>
    </Limit>

    <Total>
      <summary>
        The total number of items which can be requested.
      </summary>
    </Total>

    <Items>
      <summary>
        The returned upload share items. See also <seealso cref="Dracoon.Sdk.Model.UploadShare"/>
      </summary>
    </Items>

  </members>

  <members name="userAccount">

    <UserAccount>
      <summary>
        This model stores informations about the user account.
      </summary>
    </UserAccount>

    <Id>
      <summary>
        The id of the user.
      </summary>
    </Id>

    <AuthData>
      <summary>
        The login data of the user. <seealso cref="Dracoon.Sdk.Model.UserAuthData"/>
      </summary>
    </AuthData>

    <UserName>
      <summary>
        The user name of the user.
      </summary>
    </UserName>

    <Title>
      <summary>
        The title of the user.
      </summary>
    </Title>

    <FirstName>
      <summary>
        The first name of the user.
      </summary>
    </FirstName>

    <LastName>
      <summary>
        The last name of the user.
      </summary>
    </LastName>

    <Email>
      <summary>
        The email address of the user.
      </summary>
    </Email>

    <HasEncryptionEnabled>
      <summary>
        If <c>true</c> then the user has set a personal encryption key.
      </summary>
    </HasEncryptionEnabled>

    <HasManageableRooms>
      <summary>
        If <c>true</c> then the user has rooms in which he is the admin.
      </summary>
    </HasManageableRooms>

    <ExpireAt>
      <summary>
        Indicates at which date the user gets invalid.
      </summary>
    </ExpireAt>

    <LastLoginSuccessAt>
      <summary>
        Indicates the date of the last successful login of the user.
      </summary>
    </LastLoginSuccessAt>

    <LastLoginFailAt>
      <summary>
        Indicates the date of the last failed login of the user.
      </summary>
    </LastLoginFailAt>

    <UserRoles>
      <summary>
        The user roles which the user has. See also <seealso cref="Dracoon.Sdk.Model.UserRole"/>
      </summary>
    </UserRoles>

    <HomeRoomId>
      <summary>
        This room is the default home room id of the user.
      </summary>
    </HomeRoomId>
  </members>

  <members name="userAuthData">

    <UserAuthData>
      <summary>
        This model stores informations about the login data of the user.
      </summary>
    </UserAuthData>

    <Method>
      <summary>
        The authentication method of the user.
      </summary>
    </Method>

    <Login>
      <summary>
        The login name of the user.
      </summary>
    </Login>

    <Password>
      <summary>
        The password of the user. (Only relevant for <see cref="Dracoon.Sdk.Model.UserAuthMethod.Basic"/>)
      </summary>
    </Password>

    <MustChangePassword>
      <summary>
        Indicates if the user have to change his password.
      </summary>
    </MustChangePassword>

    <ADConfigId>
      <summary>
        The id of the ad configuration.
      </summary>
    </ADConfigId>

    <OIDConfigId>
      <summary>
        The id of the open id configuration.
      </summary>
    </OIDConfigId>
    
  </members>

  <members name="userAuthMethod">

    <UserAuthMethod>
      <summary>
        The method which are available for authentication.
      </summary>
    </UserAuthMethod>

    <Basic>
      <summary>
        The basic authentication.
      </summary>
    </Basic>

    <ActiveDirectory>
      <summary>
        The active directory authentication.
      </summary>
    </ActiveDirectory>

    <Radius>
      <summary>
        The radius authentication.
      </summary>
    </Radius>

    <OpenID>
      <summary>
        The openID authentication.
      </summary>
    </OpenID>

    <Unknown>
      <summary>
        An authentication method which the sdk currently doesn't knows.
      </summary>
    </Unknown>
    
  </members>

  <members name="userInfo">

    <UserInfo>
      <summary>
        This model stores informations about the user.
      </summary>
    </UserInfo>

    <Id>
      <summary>
        The id of the user.
      </summary>
    </Id>

    <UserName>
      <summary>
        The user name.
      </summary>
    </UserName>

    <AvatarUUID>
      <summary>
        The uuid of the avatar image for this user.
      </summary>
    </AvatarUUID>

    <FirstName>
      <summary>
        The first name of the user. (Mandatory if <see cref="Dracoon.Sdk.Model.UserInfo.UserType"/> is internal)
      </summary>
    </FirstName>

    <LastName>
      <summary>
        The last name of the user. (Mandatory if <see cref="Dracoon.Sdk.Model.UserInfo.UserType"/> is internal)
      </summary>
    </LastName>

    <Email>
      <summary>
        The email address of the user.
      </summary>
    </Email>

    <Title>
      <summary>
        The job titles of the user.
      </summary>
    </Title>

    <UserType>
      <summary>
        The type of the user.
      </summary>
    </UserType>
    
  </members>

  <members name="userKeyPairAlgorithmData">

    <UserKeyPairAlgorithmData>
      <summary>
        This model stores informations about a algorithm for the user key pair.
      </summary>
    </UserKeyPairAlgorithmData>

    <Algorithm>
      <summary>
        The user key pair algorithm.
      </summary>
    </Algorithm>

    <State>
      <summary>
        The state of the user key pair algorithm.
      </summary>
    </State>

  </members>
  
  <members name="userType">

    <UserType>
      <summary>
        Enumeration of user types.
      </summary>
    </UserType>

    <Internal>
      <summary>
        The user is a internal user with his own DRACOON account.
      </summary>
    </Internal>

    <External>
      <summary>
        The user hasn't an own DRACOON account.
      </summary>
    </External>

    <System>
      <summary>
        The user is a non human user.
      </summary>
    </System>

    <Deleted>
      <summary>
        The user was a user with his own DRACOON account but is know deleted.
      </summary>
    </Deleted>

  </members>

  <members name="userRole">

    <UserRole>
      <summary>
        Enumeration of the user roles.
      </summary>
    </UserRole>

    <Undefined>
      <summary>
        The role of the user not defined.
      </summary>
    </Undefined>

    <ConfigManager>
      <summary>
        The user has the permission to change the configuration of the server.
      </summary>
    </ConfigManager>

    <UserManager>
      <summary>
        The user has the permission to manage the user accounts.
      </summary>
    </UserManager>

    <GroupManager>
      <summary>
        The user has the permission to manage the groups.
      </summary>
    </GroupManager>

    <RoomManager>
      <summary>
        The user has the permission to change room configurations.
      </summary>
    </RoomManager>

    <LogAuditor>
      <summary>
        The user has the permission to change the configuration of the log.
      </summary>
    </LogAuditor>

  </members>

</docs>